{"ast":null,"code":"import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getDate } from \"./getDate.js\";\nimport { getDay } from \"./getDay.js\";\nimport { startOfMonth } from \"./startOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\r\n * The {@link getWeekOfMonth} function options.\r\n */\n\n/**\r\n * @name getWeekOfMonth\r\n * @category Week Helpers\r\n * @summary Get the week of the month of the given date.\r\n *\r\n * @description\r\n * Get the week of the month of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The week of month\r\n *\r\n * @example\r\n * // Which week of the month is 9 November 2017?\r\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\r\n * //=> 2\r\n */\nexport function getWeekOfMonth(date, options) {\n  var _ref, _ref2, _ref3, _options$weekStartsOn, _options$locale, _defaultOptions$local;\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn = (_ref = (_ref2 = (_ref3 = (_options$weekStartsOn = options === null || options === void 0 ? void 0 : options.weekStartsOn) !== null && _options$weekStartsOn !== void 0 ? _options$weekStartsOn : options === null || options === void 0 || (_options$locale = options.locale) === null || _options$locale === void 0 || (_options$locale = _options$locale.options) === null || _options$locale === void 0 ? void 0 : _options$locale.weekStartsOn) !== null && _ref3 !== void 0 ? _ref3 : defaultOptions.weekStartsOn) !== null && _ref2 !== void 0 ? _ref2 : (_defaultOptions$local = defaultOptions.locale) === null || _defaultOptions$local === void 0 || (_defaultOptions$local = _defaultOptions$local.options) === null || _defaultOptions$local === void 0 ? void 0 : _defaultOptions$local.weekStartsOn) !== null && _ref !== void 0 ? _ref : 0;\n  const currentDayOfMonth = getDate(toDate(date, options === null || options === void 0 ? void 0 : options.in));\n  if (isNaN(currentDayOfMonth)) return NaN;\n  const startWeekDay = getDay(startOfMonth(date, options));\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeekOfMonth;","map":{"version":3,"names":["getDefaultOptions","getDate","getDay","startOfMonth","toDate","getWeekOfMonth","date","options","_ref","_ref2","_ref3","_options$weekStartsOn","_options$locale","_defaultOptions$local","defaultOptions","weekStartsOn","locale","currentDayOfMonth","in","isNaN","NaN","startWeekDay","lastDayOfFirstWeek","remainingDaysAfterFirstWeek","Math","ceil"],"sources":["C:/work/EMG/EMGHomePage/app/daikichi/ganttdules/node_modules/date-fns/getWeekOfMonth.js"],"sourcesContent":["import { getDefaultOptions } from \"./_lib/defaultOptions.js\";\r\nimport { getDate } from \"./getDate.js\";\r\nimport { getDay } from \"./getDay.js\";\r\nimport { startOfMonth } from \"./startOfMonth.js\";\r\nimport { toDate } from \"./toDate.js\";\r\n\r\n/**\r\n * The {@link getWeekOfMonth} function options.\r\n */\r\n\r\n/**\r\n * @name getWeekOfMonth\r\n * @category Week Helpers\r\n * @summary Get the week of the month of the given date.\r\n *\r\n * @description\r\n * Get the week of the month of the given date.\r\n *\r\n * @param date - The given date\r\n * @param options - An object with options.\r\n *\r\n * @returns The week of month\r\n *\r\n * @example\r\n * // Which week of the month is 9 November 2017?\r\n * const result = getWeekOfMonth(new Date(2017, 10, 9))\r\n * //=> 2\r\n */\r\nexport function getWeekOfMonth(date, options) {\r\n  const defaultOptions = getDefaultOptions();\r\n  const weekStartsOn =\r\n    options?.weekStartsOn ??\r\n    options?.locale?.options?.weekStartsOn ??\r\n    defaultOptions.weekStartsOn ??\r\n    defaultOptions.locale?.options?.weekStartsOn ??\r\n    0;\r\n\r\n  const currentDayOfMonth = getDate(toDate(date, options?.in));\r\n  if (isNaN(currentDayOfMonth)) return NaN;\r\n\r\n  const startWeekDay = getDay(startOfMonth(date, options));\r\n\r\n  let lastDayOfFirstWeek = weekStartsOn - startWeekDay;\r\n  if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;\r\n\r\n  const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;\r\n  return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;\r\n}\r\n\r\n// Fallback for modularized imports:\r\nexport default getWeekOfMonth;\r\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,OAAO,QAAQ,cAAc;AACtC,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,MAAM,QAAQ,aAAa;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,IAAI,EAAEC,OAAO,EAAE;EAAA,IAAAC,IAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,qBAAA;EAC5C,MAAMC,cAAc,GAAGd,iBAAiB,CAAC,CAAC;EAC1C,MAAMe,YAAY,IAAAP,IAAA,IAAAC,KAAA,IAAAC,KAAA,IAAAC,qBAAA,GAChBJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,YAAY,cAAAJ,qBAAA,cAAAA,qBAAA,GACrBJ,OAAO,aAAPA,OAAO,gBAAAK,eAAA,GAAPL,OAAO,CAAES,MAAM,cAAAJ,eAAA,gBAAAA,eAAA,GAAfA,eAAA,CAAiBL,OAAO,cAAAK,eAAA,uBAAxBA,eAAA,CAA0BG,YAAY,cAAAL,KAAA,cAAAA,KAAA,GACtCI,cAAc,CAACC,YAAY,cAAAN,KAAA,cAAAA,KAAA,IAAAI,qBAAA,GAC3BC,cAAc,CAACE,MAAM,cAAAH,qBAAA,gBAAAA,qBAAA,GAArBA,qBAAA,CAAuBN,OAAO,cAAAM,qBAAA,uBAA9BA,qBAAA,CAAgCE,YAAY,cAAAP,IAAA,cAAAA,IAAA,GAC5C,CAAC;EAEH,MAAMS,iBAAiB,GAAGhB,OAAO,CAACG,MAAM,CAACE,IAAI,EAAEC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEW,EAAE,CAAC,CAAC;EAC5D,IAAIC,KAAK,CAACF,iBAAiB,CAAC,EAAE,OAAOG,GAAG;EAExC,MAAMC,YAAY,GAAGnB,MAAM,CAACC,YAAY,CAACG,IAAI,EAAEC,OAAO,CAAC,CAAC;EAExD,IAAIe,kBAAkB,GAAGP,YAAY,GAAGM,YAAY;EACpD,IAAIC,kBAAkB,IAAI,CAAC,EAAEA,kBAAkB,IAAI,CAAC;EAEpD,MAAMC,2BAA2B,GAAGN,iBAAiB,GAAGK,kBAAkB;EAC1E,OAAOE,IAAI,CAACC,IAAI,CAACF,2BAA2B,GAAG,CAAC,CAAC,GAAG,CAAC;AACvD;;AAEA;AACA,eAAelB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}