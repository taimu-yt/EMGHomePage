{"ast":null,"code":"import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\nconst eraValues = {\n  narrow: [\"av. J.-C\", \"ap. J.-C\"],\n  abbreviated: [\"av. J.-C\", \"ap. J.-C\"],\n  wide: [\"avant Jésus-Christ\", \"après Jésus-Christ\"]\n};\nconst quarterValues = {\n  narrow: [\"T1\", \"T2\", \"T3\", \"T4\"],\n  abbreviated: [\"1er trim.\", \"2ème trim.\", \"3ème trim.\", \"4ème trim.\"],\n  wide: [\"1er trimestre\", \"2ème trimestre\", \"3ème trimestre\", \"4ème trimestre\"]\n};\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\"janv.\", \"févr.\", \"mars\", \"avr.\", \"mai\", \"juin\", \"juil.\", \"août\", \"sept.\", \"oct.\", \"nov.\", \"déc.\"],\n  wide: [\"janvier\", \"février\", \"mars\", \"avril\", \"mai\", \"juin\", \"juillet\", \"août\", \"septembre\", \"octobre\", \"novembre\", \"décembre\"]\n};\nconst dayValues = {\n  narrow: [\"D\", \"L\", \"M\", \"M\", \"J\", \"V\", \"S\"],\n  short: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"],\n  abbreviated: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\n  wide: [\"dimanche\", \"lundi\", \"mardi\", \"mercredi\", \"jeudi\", \"vendredi\", \"samedi\"]\n};\nconst dayPeriodValues = {\n  narrow: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"minuit\",\n    noon: \"midi\",\n    morning: \"mat.\",\n    afternoon: \"ap.m.\",\n    evening: \"soir\",\n    night: \"mat.\"\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"minuit\",\n    noon: \"midi\",\n    morning: \"matin\",\n    afternoon: \"après-midi\",\n    evening: \"soir\",\n    night: \"matin\"\n  },\n  wide: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"minuit\",\n    noon: \"midi\",\n    morning: \"du matin\",\n    afternoon: \"de l’après-midi\",\n    evening: \"du soir\",\n    night: \"du matin\"\n  }\n};\nconst ordinalNumber = (dirtyNumber, options) => {\n  const number = Number(dirtyNumber);\n  const unit = options === null || options === void 0 ? void 0 : options.unit;\n  if (number === 0) return \"0\";\n  const feminineUnits = [\"year\", \"week\", \"hour\", \"minute\", \"second\"];\n  let suffix;\n  if (number === 1) {\n    suffix = unit && feminineUnits.includes(unit) ? \"ère\" : \"er\";\n  } else {\n    suffix = \"ème\";\n  }\n  return number + suffix;\n};\nconst LONG_MONTHS_TOKENS = [\"MMM\", \"MMMM\"];\nexport const localize = {\n  preprocessor: (date, parts) => {\n    // Replaces the `do` tokens with `d` when used with long month tokens and the day of the month is greater than one.\n    // Use case \"do MMMM\" => 1er août, 29 août\n    // see https://github.com/date-fns/date-fns/issues/1391\n\n    if (date.getDate() === 1) return parts;\n    const hasLongMonthToken = parts.some(part => part.isToken && LONG_MONTHS_TOKENS.includes(part.value));\n    if (!hasLongMonthToken) return parts;\n    return parts.map(part => part.isToken && part.value === \"do\" ? {\n      isToken: true,\n      value: \"d\"\n    } : part);\n  },\n  ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\"\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: quarter => quarter - 1\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\"\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\"\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\"\n  })\n};","map":{"version":3,"names":["buildLocalizeFn","eraValues","narrow","abbreviated","wide","quarterValues","monthValues","dayValues","short","dayPeriodValues","am","pm","midnight","noon","morning","afternoon","evening","night","ordinalNumber","dirtyNumber","options","number","Number","unit","feminineUnits","suffix","includes","LONG_MONTHS_TOKENS","localize","preprocessor","date","parts","getDate","hasLongMonthToken","some","part","isToken","value","map","era","values","defaultWidth","quarter","argumentCallback","month","day","dayPeriod"],"sources":["C:/work/EMG/EMGHomePage/app/daikichi/ganttdules/node_modules/date-fns/locale/fr/_lib/localize.js"],"sourcesContent":["import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.js\";\r\n\r\nconst eraValues = {\r\n  narrow: [\"av. J.-C\", \"ap. J.-C\"],\r\n  abbreviated: [\"av. J.-C\", \"ap. J.-C\"],\r\n  wide: [\"avant Jésus-Christ\", \"après Jésus-Christ\"],\r\n};\r\n\r\nconst quarterValues = {\r\n  narrow: [\"T1\", \"T2\", \"T3\", \"T4\"],\r\n  abbreviated: [\"1er trim.\", \"2ème trim.\", \"3ème trim.\", \"4ème trim.\"],\r\n  wide: [\"1er trimestre\", \"2ème trimestre\", \"3ème trimestre\", \"4ème trimestre\"],\r\n};\r\n\r\nconst monthValues = {\r\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\r\n  abbreviated: [\r\n    \"janv.\",\r\n    \"févr.\",\r\n    \"mars\",\r\n    \"avr.\",\r\n    \"mai\",\r\n    \"juin\",\r\n    \"juil.\",\r\n    \"août\",\r\n    \"sept.\",\r\n    \"oct.\",\r\n    \"nov.\",\r\n    \"déc.\",\r\n  ],\r\n\r\n  wide: [\r\n    \"janvier\",\r\n    \"février\",\r\n    \"mars\",\r\n    \"avril\",\r\n    \"mai\",\r\n    \"juin\",\r\n    \"juillet\",\r\n    \"août\",\r\n    \"septembre\",\r\n    \"octobre\",\r\n    \"novembre\",\r\n    \"décembre\",\r\n  ],\r\n};\r\n\r\nconst dayValues = {\r\n  narrow: [\"D\", \"L\", \"M\", \"M\", \"J\", \"V\", \"S\"],\r\n  short: [\"di\", \"lu\", \"ma\", \"me\", \"je\", \"ve\", \"sa\"],\r\n  abbreviated: [\"dim.\", \"lun.\", \"mar.\", \"mer.\", \"jeu.\", \"ven.\", \"sam.\"],\r\n\r\n  wide: [\r\n    \"dimanche\",\r\n    \"lundi\",\r\n    \"mardi\",\r\n    \"mercredi\",\r\n    \"jeudi\",\r\n    \"vendredi\",\r\n    \"samedi\",\r\n  ],\r\n};\r\n\r\nconst dayPeriodValues = {\r\n  narrow: {\r\n    am: \"AM\",\r\n    pm: \"PM\",\r\n    midnight: \"minuit\",\r\n    noon: \"midi\",\r\n    morning: \"mat.\",\r\n    afternoon: \"ap.m.\",\r\n    evening: \"soir\",\r\n    night: \"mat.\",\r\n  },\r\n  abbreviated: {\r\n    am: \"AM\",\r\n    pm: \"PM\",\r\n    midnight: \"minuit\",\r\n    noon: \"midi\",\r\n    morning: \"matin\",\r\n    afternoon: \"après-midi\",\r\n    evening: \"soir\",\r\n    night: \"matin\",\r\n  },\r\n  wide: {\r\n    am: \"AM\",\r\n    pm: \"PM\",\r\n    midnight: \"minuit\",\r\n    noon: \"midi\",\r\n    morning: \"du matin\",\r\n    afternoon: \"de l’après-midi\",\r\n    evening: \"du soir\",\r\n    night: \"du matin\",\r\n  },\r\n};\r\n\r\nconst ordinalNumber = (dirtyNumber, options) => {\r\n  const number = Number(dirtyNumber);\r\n  const unit = options?.unit;\r\n\r\n  if (number === 0) return \"0\";\r\n\r\n  const feminineUnits = [\"year\", \"week\", \"hour\", \"minute\", \"second\"];\r\n  let suffix;\r\n\r\n  if (number === 1) {\r\n    suffix = unit && feminineUnits.includes(unit) ? \"ère\" : \"er\";\r\n  } else {\r\n    suffix = \"ème\";\r\n  }\r\n\r\n  return number + suffix;\r\n};\r\n\r\nconst LONG_MONTHS_TOKENS = [\"MMM\", \"MMMM\"];\r\n\r\nexport const localize = {\r\n  preprocessor: (date, parts) => {\r\n    // Replaces the `do` tokens with `d` when used with long month tokens and the day of the month is greater than one.\r\n    // Use case \"do MMMM\" => 1er août, 29 août\r\n    // see https://github.com/date-fns/date-fns/issues/1391\r\n\r\n    if (date.getDate() === 1) return parts;\r\n\r\n    const hasLongMonthToken = parts.some(\r\n      (part) => part.isToken && LONG_MONTHS_TOKENS.includes(part.value),\r\n    );\r\n\r\n    if (!hasLongMonthToken) return parts;\r\n\r\n    return parts.map((part) =>\r\n      part.isToken && part.value === \"do\"\r\n        ? { isToken: true, value: \"d\" }\r\n        : part,\r\n    );\r\n  },\r\n\r\n  ordinalNumber,\r\n\r\n  era: buildLocalizeFn({\r\n    values: eraValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  quarter: buildLocalizeFn({\r\n    values: quarterValues,\r\n    defaultWidth: \"wide\",\r\n    argumentCallback: (quarter) => quarter - 1,\r\n  }),\r\n\r\n  month: buildLocalizeFn({\r\n    values: monthValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  day: buildLocalizeFn({\r\n    values: dayValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n\r\n  dayPeriod: buildLocalizeFn({\r\n    values: dayPeriodValues,\r\n    defaultWidth: \"wide\",\r\n  }),\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}